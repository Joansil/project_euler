defmodule PeTwo do
  @moduledoc """
  Showing the second problem of Projec Euler
  """
  @spec sum_even_value :: number
  @doc """
  Each new term in the Fibonacci sequence is generated by adding the previous two terms.
  By starting with 1 and 2, the first 10 terms will be:
  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

  By considering the terms in the Fibonacci sequence whose values do not exceed four million,
  find the sum of the even-valued terms.

  ## Let's see it
    If we only write the even numbers of the Fibonacci series:
      2, 8, 34, 144, 610...
    We have:
      34 = 4 * 8 + 2
      144 = 4 * 34 + 8
      610 = 144 * 4 + 34
      Number = 4 * (Previous Number) +  Previous Previous Number

    They following the recursive way:
      E(n) = 4*E(n-1) + E(n-2)

    So, we just have to create the serie with this relation and sum the even-valued terms,
    whose values do not exceed four million.

    ## Example only in the 4000000 range
    iex> PeTwo.sum_even_value
    4613732
  """

  def sum_even_value do
    sum =
      Enum.map(1..34, &fibo_serie/1)
      |> Enum.filter(fn x -> rem(x, 2) == 0 end)
      |> Enum.sum()

    sum
  end

  def fibo_serie(0), do: 0
  def fibo_serie(1), do: 1
  def fibo_serie(x), do: fibo_serie(x - 1) + fibo_serie(x - 2)
end
